import { readFile } from 'fs/promises'
import { join } from 'path'

export default defineEventHandler(async (event) => {
  if (event.node.req.method !== 'POST') {
    throw createError({
      statusCode: 405,
      statusMessage: 'Method not allowed'
    })
  }

  try {
    const { message, mode = 'standard', context } = await readBody(event)

    if (!message?.trim()) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Message is required'
      })
    }

    // For standard mode, use the existing logic
    if (mode === 'standard') {
      return generateStandardResponse(message, context)
    }

    // For AI mode, use OpenAI
    if (mode === 'ai') {
      return await generateAIResponse(message, context)
    }

    throw createError({
      statusCode: 400,
      statusMessage: 'Invalid mode specified'
    })

  } catch (error: any) {
    console.error('Chat API error:', error)
    
    if (error.statusCode) {
      throw error
    }

    throw createError({
      statusCode: 500,
      statusMessage: 'Internal server error'
    })
  }
})

// Standard response generation (existing logic)
function generateStandardResponse(message: string, context: any) {
  const isRelevant = checkMessageRelevance(message)
  
  if (!isRelevant) {
    return {
      content: `Rozum√≠m va≈°√≠ ot√°zce, ale zd√° se, ≈æe nesouvis√≠ s aktu√°ln√≠m c√≠lem skupiny. Pojƒème se zamƒõ≈ôit na kvadratick√© rovnice! 

M≈Ø≈æete se mƒõ zeptat nap≈ô√≠klad:
‚Ä¢ Jak vypoƒç√≠t√°m diskriminant?
‚Ä¢ Jak√Ω je rozd√≠l mezi line√°rn√≠ a kvadratickou rovnic√≠?
‚Ä¢ M≈Ø≈æete mi uk√°zat p≈ô√≠klad ≈ôe≈°en√≠?`,
      warning: 'Tato zpr√°va nesouvis√≠ s c√≠li skupiny. Zamƒõ≈ôte se na kvadratick√© rovnice.',
      mode: 'standard'
    }
  }

  // Generate standard response
  const responses = [
    `V√Ωborn√° ot√°zka! Kvadratick√© rovnice maj√≠ tvar ax¬≤ + bx + c = 0, kde a ‚â† 0.

**Diskriminant** se poƒç√≠t√° jako D = b¬≤ - 4ac:
‚Ä¢ Pokud D > 0, rovnice m√° 2 r≈Øzn√© re√°ln√© ko≈ôeny
‚Ä¢ Pokud D = 0, rovnice m√° 1 dvojn√°sobn√Ω ko≈ôen  
‚Ä¢ Pokud D < 0, rovnice nem√° re√°ln√© ko≈ôeny

Chcete si vyzkou≈°et konkr√©tn√≠ p≈ô√≠klad?`,

    `Skvƒõle! Hlavn√≠ rozd√≠l mezi line√°rn√≠ a kvadratickou rovnic√≠:

**Line√°rn√≠ rovnice (ax + b = 0):**
‚Ä¢ Graf je p≈ô√≠mka
‚Ä¢ Maxim√°lnƒõ 1 ≈ôe≈°en√≠
‚Ä¢ Stupe≈à 1

**Kvadratick√© rovnice (ax¬≤ + bx + c = 0):**
‚Ä¢ Graf je parabola  
‚Ä¢ Maxim√°lnƒõ 2 ≈ôe≈°en√≠
‚Ä¢ Stupe≈à 2

Kter√© t√©ma byste chtƒõli probrat podrobnƒõji?`,

    `Perfekt! Pojƒème si uk√°zat ≈ôe≈°en√≠ kvadratick√© rovnice krok za krokem:

**P≈ô√≠klad:** x¬≤ - 5x + 6 = 0

1) Identifikujeme: a = 1, b = -5, c = 6
2) Spoƒç√≠t√°me diskriminant: D = (-5)¬≤ - 4¬∑1¬∑6 = 25 - 24 = 1
3) D > 0, tak≈æe m√° 2 ko≈ôeny
4) x‚ÇÅ,‚ÇÇ = (5 ¬± ‚àö1) / 2 = (5 ¬± 1) / 2
5) x‚ÇÅ = 3, x‚ÇÇ = 2

Zkuste si sami ≈ôe≈°it: **2x¬≤ - 7x + 3 = 0**`
  ]

  return {
    content: responses[Math.floor(Math.random() * responses.length)],
    mode: 'standard'
  }
}

// AI response generation using OpenAI
async function generateAIResponse(message: string, context: any) {
  try {
    // Load the math teacher prompt
    const promptPath = join(process.cwd(), 'app/server/prompts/math-teacher.md')
    const systemPrompt = await readFile(promptPath, 'utf-8')

    // Construct context information
    let contextInfo = ''
    if (context?.groupData) {
      contextInfo = `\n\nKONTEXT SKUPINY:\n- N√°zev: ${context.groupData.name}\n- C√≠l: ${context.groupData.description}`
    }

    if (context?.goals && context.goals.length > 0) {
      contextInfo += '\n\nAKTU√ÅLN√ç C√çLE STUDENTA:\n'
      context.goals.forEach((goal: any, index: number) => {
        const status = goal.type === 'boolean' 
          ? (goal.completed ? '‚úÖ Splnƒõno' : '‚ùå Nesplnƒõno')
          : `üìä ${goal.progress || 0}% (${goal.current || 0}/${goal.target || 0})`
        contextInfo += `${index + 1}. ${goal.title} - ${status}\n`
      })
    }

    // For now, return a mock AI response since we don't have OpenAI configured
    // TODO: Replace with actual OpenAI API call
    const aiResponse = await mockOpenAIResponse(message, systemPrompt + contextInfo)

    return {
      content: aiResponse,
      mode: 'ai',
      context: 'AI Teacher mode active'
    }

  } catch (error) {
    console.error('AI response generation error:', error)
    
    // Fallback to standard response if AI fails
    return {
      content: 'Omlouv√°m se, AI uƒçitel moment√°lnƒõ nen√≠ dostupn√Ω. Zkusme to standardn√≠m zp≈Øsobem.',
      mode: 'standard',
      error: 'AI mode temporarily unavailable'
    }
  }
}

// Mock OpenAI response - replace with actual API call
async function mockOpenAIResponse(message: string, systemPrompt: string): Promise<string> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000))

  // Generate contextual response based on message content
  const lowerMessage = message.toLowerCase()

  if (lowerMessage.includes('diskriminant')) {
    return `V√Ωbornƒõ, pt√°te se na **diskriminant**! To je kl√≠ƒçov√Ω pojem pro pochopen√≠ kvadratick√Ωch rovnic.

**Diskriminant** (oznaƒçovan√Ω p√≠smenem D) n√°m ≈ô√≠k√°, kolik ko≈ôen≈Ø bude m√≠t kvadratick√° rovnice.

**Vzorec**: D = b¬≤ - 4ac

**Co n√°m hodnota diskriminantu ≈ô√≠k√°?**
‚Ä¢ **D > 0**: Rovnice m√° dva r≈Øzn√© re√°ln√© ko≈ôeny
‚Ä¢ **D = 0**: Rovnice m√° jeden dvojn√°sobn√Ω ko≈ôen  
‚Ä¢ **D < 0**: Rovnice nem√° re√°ln√© ko≈ôeny (m√° komplexn√≠ ko≈ôeny)

**Praktick√Ω p≈ô√≠klad:**
Pro rovnici 2x¬≤ - 7x + 3 = 0:
1) a = 2, b = -7, c = 3
2) D = (-7)¬≤ - 4¬∑2¬∑3 = 49 - 24 = 25
3) D = 25 > 0, tak≈æe m√° dva r≈Øzn√© ko≈ôeny

Rozum√≠te tomuto postupu? Chcete si vyzkou≈°et v√Ωpoƒçet ko≈ôen≈Ø?`
  }

  if (lowerMessage.includes('rozd√≠l') && lowerMessage.includes('line√°rn√≠')) {
    return `Skvƒõl√° ot√°zka! Pojƒème si vysvƒõtlit rozd√≠l mezi **line√°rn√≠** a **kvadratickou** rovnic√≠.

**Line√°rn√≠ rovnice** (stupe≈à 1):
‚Ä¢ **Tvar**: ax + b = 0 (kde a ‚â† 0)
‚Ä¢ **Graf**: P≈ô√≠mka
‚Ä¢ **Poƒçet ≈ôe≈°en√≠**: Pr√°vƒõ jedno
‚Ä¢ **P≈ô√≠klad**: 3x - 6 = 0 ‚Üí x = 2

**Kvadratick√° rovnice** (stupe≈à 2):
‚Ä¢ **Tvar**: ax¬≤ + bx + c = 0 (kde a ‚â† 0)
‚Ä¢ **Graf**: Parabola
‚Ä¢ **Poƒçet ≈ôe≈°en√≠**: 0, 1 nebo 2 (podle diskriminantu)
‚Ä¢ **P≈ô√≠klad**: x¬≤ - 5x + 6 = 0 ‚Üí x‚ÇÅ = 2, x‚ÇÇ = 3

**Hlavn√≠ rozd√≠ly:**
1. **Nejvy≈°≈°√≠ mocnina**: u line√°rn√≠ je x¬π, u kvadratick√© x¬≤
2. **Tvar grafu**: p≈ô√≠mka vs. parabola
3. **Poƒçet ≈ôe≈°en√≠**: line√°rn√≠ m√° v≈ædy jedno, kvadratick√° 0-2

Co v√°s zaj√≠m√° v√≠ce - ≈ôe≈°en√≠ line√°rn√≠ch, nebo kvadratick√Ωch rovnic?`
  }

  // General math teacher response
  const responses = [
    `To je zaj√≠mav√Ω pohled na probl√©m! Pojƒème si to rozebrat spoleƒçnƒõ krok za krokem.

**Nejprve si ujasn√≠me, co v√≠me:**
- Jak√© informace m√°me k dispozici?
- Co p≈ôesnƒõ se od n√°s po≈æaduje?

**Potom navrhneme strategii:**
- Kter√Ω matematick√Ω n√°stroj pou≈æijeme?
- Jak√Ωm postupem budeme ≈ôe≈°en√≠ hledat?

M≈Ø≈æete mi ≈ô√≠ct, jak byste k tomuto probl√©mu p≈ôistoupili vy?`,

    `V√Ωbornƒõ! Vid√≠m, ≈æe se sna≈æ√≠te pochopit tento koncept. To je p≈ôesnƒõ spr√°vn√Ω p≈ô√≠stup k matematice.

**Zkusme si to vysvƒõtlit na p≈ô√≠kladu:**
Matematika je jako stavƒõn√≠ domu - ka≈æd√Ω nov√Ω pojem stav√≠ na tom, co u≈æ um√≠me.

**V√°≈° probl√©m rozlo≈æ√≠me na ƒç√°sti:**
1. Co u≈æ v√≠me a um√≠me
2. Co je nov√©ho
3. Jak to spoj√≠me dohromady

Kter√° ƒç√°st v√°m dƒõl√° nejvƒõt≈°√≠ probl√©m? Zaƒçneme od n√≠.`
  ]

  return responses[Math.floor(Math.random() * responses.length)] ?? responses[0]
}

// Message relevance check
function checkMessageRelevance(message: string): boolean {
  const relevantKeywords = [
    'kvadratick√°', 'rovnice', 'diskriminant', 'line√°rn√≠', 'ax¬≤', 'bx', 'matematika',
    '≈ôe≈°en√≠', 'ko≈ôen', 'graf', 'parabola', 'vzorec', 'funkce', 'v√Ωpoƒçet'
  ]
  
  return relevantKeywords.some(keyword => 
    message.toLowerCase().includes(keyword.toLowerCase())
  )
}